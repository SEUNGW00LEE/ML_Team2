geom_point() +
geom_smooth(method="lm",se=FALSE) +
facet_wrap(~gp_wt)
#5
mpg %>%
filter(cyl == 4)
#5
mpg %>%
filter(cyl == 4) %>%
factor(year)
#5
mpg %>%
filter(cyl == 4) %>%
as.factor(year)
?as.factor
#5
mpg %>%
filter(cyl == 4) %>%
as.factor(mpg$year)
#5
mpg
mpg %>%
filter(cyl == 4) %>%
mutate(year=as.factor(year))
mpg %>%
filter(cyl == 4) %>%
mutate(year=as.factor(year)) %>%
select(model,year,displ,cty,hwy) %>%
arrange(year)
mpg %>%
filter(cyl == 4) %>%
mutate(year=as.factor(year)) %>%
select(c(model,year,displ,cty,hwy)) %>%
arrange(year)
mpg %>%
filter(cyl == 4) %>%
mutate(year=as.factor(year)) %>%
dplyr::select(c(model,year,displ,cty,hwy)) %>%
arrange(year)
mpg %>%
filter(cyl == 4) %>%
mutate(year=as.factor(year)) %>%
dplyr::select(c(model,year,displ,cty,hwy)) %>%
arrange(year,desc(displ),cty)
CI_mean<-function(x,conf=0.95){
m <- mean(x)
se <- sd(x) / sqrt(length(x))
alpha <- 1 -conf
c(m-qnorm(1-alpha/2)*se,m+qnorm(1+alpha/2)*se)
}
set.seed(1234567)
set.seed(12345679)
x <- rnorm(n=100)
CI_mean(x)
c(m-qnorm(1-alpha/2)*se,m+qnorm(1-alpha/2)*se)
CI_mean<-function(x,conf=0.95){
m <- mean(x)
se <- sd(x) / sqrt(length(x))
alpha <- 1 -conf
c(m-qnorm(1-alpha/2)*se,m+qnorm(1-alpha/2)*se)
}
set.seed(12345679)
x <- rnorm(n=100)
CI_mean(x)
CI_mean(x, conf=0.90)
# ... : 함수의 마지막 변수로 지정, 기존의 함수를 이용하여 함수를 정의하는 경우 매우 유용함
y <- c(x,NA)
y
CI_mean(y)
CI_mean(y,na.rm=TRUE)
CI_mean_dot <- function(x,conf=0.95,...){
m <- mean(x,...)
se <- sd(x,....) / sqrt(length(x,...))
alpha <- 1 -conf
c(m-qnorm(1-alpha/2)*se,m+qnorm(1-alpha/2)*se)
}
CI_mean_dot(y,na.rm=TRUE)
CI_mean_dot <- function(x,conf=0.95,...){
m <- mean(x,...)
se <- sd(x,...) / sqrt(length(x,...))
alpha <- 1 -conf
c(m-qnorm(1-alpha/2)*se,m+qnorm(1-alpha/2)*se)
}
CI_mean_dot(y,na.rm=TRUE)
CI_mean_dot(y,na.rm=TRUE)
CI_mean_dot <- function(x,conf=0.95,...){
m <- mean(x,...)
se <- sd(x,...) / sqrt(!is.na(x))
alpha <- 1 -conf
c(m-qnorm(1-alpha/2)*se,m+qnorm(1-alpha/2)*se)
}
CI_mean_dot(y,na.rm=TRUE)
CI_mean_dot <- function(x,conf=0.95,...){
m <- mean(x,...)
se <- sd(x,...) / sqrt(sum(!is.na(x)))
alpha <- 1 -conf
c(m-qnorm(1-alpha/2)*se,m+qnorm(1-alpha/2)*se)
}
CI_mean_dot(y,na.rm=TRUE)
CI_mean_dot1 <- function(x,conf=0.95,aa=F){
m <-mean(x,na.rm=aa)
se <- sd(x,na.rm=aa)/sum(!is.na(x))
alpha <- 1- conf
c(m-qnorm(1-alpha/2)*se, m+qnorm(1-alpha/2)*se)
}
CI_mean_dot1(y,aa=T)
CI_mean_dot2 <- function(x,conf=0.95,na.rm=F){
m <- mean(x,na.rm=na.rm)
se <- sd(x,na.rm=na.rm)/sqrt(sum(!is.na(x)))
alpha <- 1-conf
c(m-qnorm(1-alpha/2)*se, m+qnorm(1-alpha/2)*se)
}
x=c(1,3,5,7,9,NA)
CI_mean_dot2(x,na.rm=T)
my_plot <- function(x,y, ...){
z_x <- (x-mean(x))/sd(x)
z_y <- (y-mean(y))/sd(y)
ggplot(data.frame(x=z_x,y=z_y)) +
geom_point(aes(x,y),...)
}
library(ggplot2)
with(cars, my_plot(x=speed,y=dist,shape=20,color="red",size=2))
my_power <- function(first,second){first^second}
my_power(second=5,first=2)
my_power(s=5,f=2)
my_power(2,5)
my_desc <- function(x,...){
m.x <- mean(x,...); sd.x <- sd(x,...)
res <- list(mean=m.x,sd=sd.x)
return(res)
}
with(cars, my_desc(x=dist))
with(airquality, my_desc(x=Ozone, na.rm=TRUE))
find_roots <- function(a,b,c){
if(a==0){
roots <- c("Not quadratic eqation")
} else{
D <- b^2-4*a*c
if D>0{
find_roots(1,4,3)
find_roots <- function(a,b,c){
if(a==0){
roots <- c("Not quadratic eqation")
} else{
D <- b^2-4*a*c
if D>0{
if (D>0){
roots <- c((-b+sqrt(D))/2*a,(-b-sqrt(D))/2*a)
} else if (D==0){
roots <- -b / (2*a)
} else {
roots = c("No real root")
}
if (D > 0){
roots <- c((-b+sqrt(D))/2*a,(-b-sqrt(D))/2*a)
} else if (D==0){
roots <- -b / (2*a)
} else {
roots = c("No real root")
}
find_roots <- function(a,b,c){
if(a==0){
roots <- c("Not quadratic eqation")
} else{
D <- b^2-4*a*c
if (D > 0){
roots <- c((-b+sqrt(D))/2*a,(-b-sqrt(D))/2*a)
} else if (D==0){
roots <- -b / (2*a)
} else {
roots = c("No real root")
}
}
return(roots)
}
find_roots(1,4,3)
x <- c(10,3,6,9)
y <- c(1,5,4,12)
ifelse(x>y,x,y)
ifelse(score<50,"Fail","Pass")
score <- c(80,75,40,98)
ifelse(score<50,"Fail","Pass")
grade <- ifelse(score<50,"Fail","Pass")
data.frame(score, grade)
#switch : switch(표현식, 선택항목리스트)
(x < -sample(1:3,1))
#switch : switch(표현식, 선택항목리스트)
rm(list=ls())
(x < -sample(1:3,1))
(x <- sample(1:3,1))
switch(x, "Park","Lee","Kim")
switch("aa", aa="bb",bb="aa")
my_center <- funtion(x,type){
x <- c(1,2,3,4,50)
my_center <- funtion(x,type){
my_center(x,med)
my_center <- funtion(x,type){
my_center <- funtion(x,type){
#예: 주어진 자료의 특성을 보고, 자료의 대푯값으로 평균과 중앙값 중 선택하는 함수 작성
rm(list=ls())
my_center <- funtion(x,type){
my_center <- function(x,type){
switch(type, mean=mean(x), med=median(x))
}
x <- c(1,2,3,4,50)
my_center(x,med)
my_center(x,"med")
my_center(x,"mean")
x=c(1,2,5,7,8)
y=c(3,7,5,2,1)
w=2
u=7
(x>2) & (y&3)
(x>2) & (y>3)
(x>2) && (y>3)
x=c(1,2,5,7,8)
y=c(3,7,5,2,1)
w=2
u=7
(x>2) & (y>3)
(x>2) && (y>3)
(w>2) & (u>3)
(w>2) && (u>3)
(x>2) | (y>3)
(x>2) || (y>3)
x=runif(1)
x
x=runif(1)
x=runif(1)
x=runif(1)
x=runif(1)
x=runif(1)-0.5;x
if(x<0) print(abs(x))
x=runif(1)-0.5;x
if(x<0) print(abs(x)) else print(x)
x=runif(1)-0.5;x
if(x<0) print(abs(x))
if(x<0) print(abs(x)) else print(x)
ifelse(x<0, print(abs(x)),print(x))
ifelse(x<0, abs(x),x
ifelse(x<0, abs(x),x)
ifelse(x<0, abs(x),x)
ifelse(x<0, c("x is negative"),c("x is positive"))
ifelse(x>=-0.5 && x <=0.5) print(x) else print("wrong number")
if(x>=-0.5 && x <=0.5) print(x) else print("wrong number")
my_plot=function(data,x,y,z,...){
ggplot(data=data,mapping=aes({{x}},{{y}},...)) +
geom_point(mapping=aes(color={{z}},...)) +
geom_smooth(...)
}
my_plot(data=mtcars, x=drat,y=wt, z=factor(am), se=FALSE, color="black")
library(ggplot2)
my_plot=function(data,x,y,z,...){
ggplot(data=data,mapping=aes({{x}},{{y}},...)) +
geom_point(mapping=aes(color={{z}},...)) +
geom_smooth(...)
}
my_plot(data=mtcars, x=drat,y=wt, z=factor(am), se=FALSE, color="black")
f1 = function(x,y,z){
list(out1= sum(tapply(x,z,mean)),
out2= sum(tapply(y,z,sd)))
}
x=c(2,5,7,1,6,3); y=c(3,1,5,6,6,2); z=factor(c(1,1,1,1,2,2))
f1(x,y,z)
myFb=function(k) {
if (k < 3) return("k must be an integer greater than 2")
res <- vector("double", k)
ser <- vector("double", k)
res[1] <- 0; res[2] <- 1
ser[k] <- 0; ser[k-1] <- 1
for(i in 1:(k-2)){
res[i+2] = res[i] + res[i+1]
ser[k-i-1] = res[i+2]
}
return(ser)
}
A <- c(5,4,8,6,3)
B <- c(9,7,8,6,9)
C <- c(3,5,2,3,7)
D <- c(2,3,4,1,4)
E <- c(7,6,9,4,7)
y <- c(A, B, C, D, E)
y
>  # 진통제 종류 범주화 : 방법1
trt <-as.factor(c(rep("A",5), rep("B",5), rep("C",5), rep("D",5), rep("E",5)))
trt
output <- aov(y ~ trt)  # 일원분산분석
summary(output)
> y <- c(64,55,59,58,72,57,66,57,74,47,58,53)  #밀의 수확량
> A <- rep(c(1,2,3,4),3)                    # 비료의 종류
str(data)   # 자료구조 확인
y <- c(64,55,59,58,72,57,66,57,74,47,58,53)  #밀의 수확량
A <- rep(c(1,2,3,4),3)                    # 비료의 종류
B <- c(rep(1,4), rep(2,4), rep(3,4))      # 품종
data <- as.data.frame(cbind(A,B,y))   # 열벡터로 결합 후 데이터프레임으로 선언
data$A <- as.factor(A)      # A 수치형을 요인으로 변경
data$B <- as.factor(B)      # B수치형을 요인으로 변경
str(data)   # 자료구조 확인
A B  y
data
anova(lm(y ~ A + B, data=data))  # 이원배치분산분석
y <- c(64, 66, 70, 72, 81, 64, 74, 51, 65,
+        65, 63, 58, 57, 43, 52, 47, 58, 67,
+        59, 68, 65, 66, 71, 59, 58, 39, 42,
+        58, 41, 46, 57, 61, 53, 53, 59, 38)
A <- factor(c(rep(1,9), rep(2,9), rep(3,9), rep(4,9)))
A
B <- factor(rep(rep(1:3, each=3),4))
B
dat <- data.frame(y, A, B)
dat
out <- aov(y ~ A*B, data=dat)
summary(out)
x <- c(71,68,66,67,70,71,70,73,72,65,66)
y <- c(69,64,65,63,65,62,65,64,66,59,62)
# 산점도
plot(x,y)
# 상관계수 검정
cor.test(x,y)
>
lm(y~x)
lm(formula = y ~ x)
>
anova(lm(y~x))
>
summary( lm(y~x) )
>
Call:
lm(formula = y ~ x)
>
>
summary( lm(y~x) )
>
summary( lm(y~x) )[1]
>
summary( lm(y~x) )[2]
summary( lm(y~x) )
> #예제10.5
x1 <- c(65,50,55,65,55,70,65,70,55,70,50,55)
x2 <- c( 3, 7, 5, 1, 3, 3, 1, 2, 4, 2, 3, 4)
y <- c(85,74,76,90,85,87,94,98,81,91,76,74)
dat <- data.frame(x1,x2,y)
out <- lm(y~x1+x2, data=dat)
summary(out)
summary(speed)
speed = c(4,7,8,9,10,11,12,13,13,14)
dsit=c(2,4,16,10,18,17,24,34,26,26)
summary(speed)
Summary(speed)
mean(dist)
dsit=c(2,4,16,10,18,17,24,34,26,26)
mean(dist)
sd(dist)
dist=c(2,4,16,10,18,17,24,34,26,26)
mean(dist)
sd(dist)
cor(speed,dist)
cor(speed,dist
)
plot(speed,dist)
library()
airquality
air <- airquality
str(air)
data.frame
library(datatoy)
remotes::install_github("statgarten/datatoys")
install.packages("remotes")
remotes::install_github("statgarten/datatoys")
library(dplyr)
library(tidyr)
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data$주행거리 <- as.numeric(gsub('km', '', car_data$주행거리))
car_data <- car_data %>%
mutate(색상 = as.character(색상),
변속기 = as.character(변속기),
연료 = as.character(연료)) %>%
spread(key = 색상, value = 색상, fill = 0, sep = '_') %>%
spread(key = 변속기, value = 변속기, fill = 0, sep = '_') %>%
spread(key = 연료, value = 연료, fill = 0, sep = '_')
View(car_data)
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
View(car_data)
car_data$연식 <- car_data %>%
mutate(연식 = sapply(strsplit(df$연식, " "), `[`, 1))
View(car_data)
car_data$연식 <- car_data %>%
mutate(연식 = sapply(strsplit(연식, " "), function(x) x[1]))
View(car_data)
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data$연식 <- car_data %>%
mutate(연식 = sapply(strsplit(연식, " "), function(x) x[1]))
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(연식, " "), function(x) x[1]))
View(car_data)
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(연식, " "), function(x) x[1]))
car_data['연식'] = car_data['연식'].str.split().str[0]
View(car_data)
car_data['연식'] = car_data['연식'].str.split().str[0]
install.packages('dplyr')
install.packages("dplyr")
install.packages('tidyr')
install.packages('tidyr')
library(dplyr)
library(tidyr)
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data['연식'] = car_data['연식'].str.split().str[0]
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(as.character(연식), " "), function(x) x[1]))
View(car_data)
rm(list=ls())
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data['']
car_data$연식 = car_data$연식.str.split().str[0]
car_data['연식'] = car_data['연식'].str.split().str[0]
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(as.character(연식), " "), `[`, 1))
rm(list=ls())
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(as.character(연식), " "), `[`, 1))
library(dplyr)
library(tidyr)
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(as.character(연식), " "), `[`, 1))
View(car_data)
rm(list=ls())
library(dplyr)
library(tidyr)
rm(list=ls())
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
car_data$가격[is.na(car_data$가격)] <- 0 # NA 값을 0으로 대체
car_data <- car_data[car_data$가격 != '[판매완료]', ]
car_data$가격 <- gsub('만원', '', car_data$가격)
car_data$가격 <- gsub(',', '', car_data$가격)
car_data$가격 <- as.numeric(car_data$가격)
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(as.character(연식), " "), `[`, 1))
View(car_data)
unique(car_data$연식)
car_data <- car_data %>%
mutate(연식 = sapply(strsplit(as.character(연식), " "), `[`, 1))
View(car_data)
car_data$연식 <- sub(" \\(.*\\)$", "", as.character(car_data$연식))
View(car_data)
setwd("~/Desktop/ML_Team2/")
car_data <- read.csv("car_data.csv", stringsAsFactors = FALSE)
View(car_data)
#연식
car_data <- car_data %>%
mutate(연식 = str_replace(as.character(연식), "\\s*\\(.*\\)$", "")) %>%
mutate(연식 = str_trim(연식))
library(stringr)
library(stringr)
#연식
car_data <- car_data %>%
mutate(연식 = str_replace(as.character(연식), "\\s*\\(.*\\)$", "")) %>%
mutate(연식 = str_trim(연식))
#연식
car_data$연식 <- str_extract(car_data$연식, "^[^ ]+")
